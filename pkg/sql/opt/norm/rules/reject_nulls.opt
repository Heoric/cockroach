# =============================================================================
# reject_nulls.opt contains normalization rules that simplify expressions based
# on "null-rejecting filters". A null-rejecting filter on column x discards rows
# in which the value of x is null. Many common SQL comparison expressions reject
# null values, such as:
# reject_nulls.opt 包含规范化规则，可简化基于“空值拒绝过滤器”的表达式。
# 列 x 上的空值拒绝过滤器会丢弃 x 值为空的行。 许多常见的 SQL 比较表达式拒绝空值，例如：
#
#   x = 1          -- Rejects nulls on x
#   y < 10         -- Rejects nulls on y
#   x = y          -- Rejects nulls on x and y
#   x IS NOT NULL  -- Rejects nulls on x
#
# Null rejection analysis is used to simplify outer joins into inner joins. This
# in turn unlocks additional rewrite rules that only work with inner joins. Some
# of these rules are needed to fully decorrelate correlated subqueries, such as
# this pattern:
# 空拒绝分析用于将外连接简化为内连接。 这反过来又解锁了仅适用于内部联接的其他重写规则。
# 需要其中一些规则来完全解除相关子查询的关联，例如此模式：
#
#   SELECT * FROM a WHERE (SELECT MIN(z) FROM b WHERE a.x=b.x) = a.y
#
# Null rejection rules work in concert with predicate pushdown rules to first
# recognize a null rejection filter at a higher level, and then to push it down
# to a lower level where it can simplify an outer join. As an example:
#
#   SELECT min(b.y) FROM a LEFT JOIN b ON True GROUP BY a.x HAVING min(b.y)=1
#
# The min(b.y)=1 expression filters rows where min(b.y) is null, and because of
# the properties of the SQL min function, it therefore excludes GroupBy input
# rows where b.y is null. Since b.y is a null-extended LEFT JOIN column,
# pushing down a "b.y IS NOT NULL" predicate will turn the LEFT JOIN into an
# INNER JOIN.
#
# Filter synthesis and pushdown must be done with care in order to avoid
# repeated pushdown of redundant filters. The null rejection rules rely on the
# Logical.Rule.RejectNullCols property to determine when it's useful to create a
# new IS NOT NULL filter. See the Logical.Rule.RejectNullCols comment for more
# details on how this works.
# =============================================================================

# RejectNullsLeftJoin reduces a LeftJoin operator to an InnerJoin operator (or a
# FullJoin to a RightJoin) when there is a null-rejecting filter on any column
# from the right side. The effect of the null-rejecting filter is that output
# rows with all NULL values on the right side created by the left (or full) join
# are eliminated, making the join equivalent to an inner (or right) join. For
# RejectNullsLeftJoin 将 LeftJoin 运算符缩减为 InnerJoin 运算符
#（或将 FullJoin 缩减为 RightJoin）当右侧的任何列上存在空值拒绝过滤器时。
# 空值拒绝过滤器的作用是消除由左（或完全）连接创建的右侧所有 NULL 值的输出行，使连接等同于内部（或右）连接。
# example:
#
#   SELECT * FROM a LEFT OUTER JOIN b ON a.x = b.x WHERE b.y < 5
#
# can be reduced to:
#
#   SELECT * FROM a INNER JOIN b ON a.x = b.x WHERE b.y < 5
#
# since b.y < 5 is a null-rejecting filter on the right side.
# 因为 b.y < 5 是右侧的空值拒绝过滤器。
#
# This rule is marked as high priority so that it runs before Select filter
# pushdown rules. Those rules may remove a filter before it's had a chance to
# rewrite the input join.
#
# Citations: [1]
[RejectNullsLeftJoin, Normalize, HighPriority]
(Select
    $input:(LeftJoin | LeftJoinApply | FullJoin
        $left:*
        $right:*
        $on:*
        $private:*
    )
    $filters:* &
        (HasNullRejectingFilter $filters (OutputCols $right))
)
=>
(Select
    (ConstructNonLeftJoin
        (OpName $input)
        $left
        $right
        $on
        $private
    )
    $filters
)

# RejectNullsRightJoin is symmetric with RejectNullsLeftJoin. It reduces a
# FullJoin operator to a LeftJoin when there is a null-rejecting filter on any
# column from the left side.
# RejectNullsRightJoin 与 RejectNullsLeftJoin 是对称的。
# 当左侧的任何列上存在空值拒绝过滤器时，它会将 FullJoin 运算符简化为 LeftJoin。
#
# This rule is marked as high priority for the same reason as
# RejectNullsLeftJoin.
[RejectNullsRightJoin, Normalize, HighPriority]
(Select
    $input:(FullJoin $left:* $right:* $on:* $private:*)
    $filters:* &
        (HasNullRejectingFilter $filters (OutputCols $left))
)
=>
(Select (LeftJoin $left $right $on $private) $filters)

# RejectNullsGroupBy pushes a "col IS NOT NULL" null-rejecting filter below the
# GroupBy operator if it allows null rejection for that column (i.e. if it's in
# the NullRejectCols set). See ruleProps.buildGroupByProps for more details on
# the criteria for setting NullRejectCols. See the file header comment for more
# information on null rejection.
#
# This rule is important for decorrelation in cases similar to this:
#
#   SELECT * FROM a WHERE (SELECT MIN(z) FROM b WHERE a.x=b.x) = a.y
#
# The top-level "= a.y" filter rejects NULL values in the b.z column, which ends
# up in the right side of a LeftJoin operator, thus enabling it to be mapped to
# an InnerJoin operator.
#
# This rule is not useful for DistinctOn: it can only fire if there are no
# FirstAgg aggregates, but in that case the filter would have gotten pushed
# through DistinctOn.
#
# This rule is marked as low priority so that it runs after Select filter
# pushdown rules. If a filter can be pushed down in its entirety, that's
# preferable to synthesizing a new "col IS NOT NULL" filter.
[RejectNullsGroupBy, Normalize, LowPriority]
(Select
    $input:(GroupBy | ScalarGroupBy
        $innerInput:*
        $aggregations:*
        $groupingPrivate:*
    )
    $filters:* &
        (HasNullRejectingFilter
            $filters
            $rejectCols:(RejectNullCols $input)
        )
)
=>
(Select
    ((OpName $input)
        (Select
            $innerInput
            [
                (FiltersItem
                    (IsNot
                        (NullRejectAggVar
                            $aggregations
                            $rejectCols
                        )
                        (Null (AnyType))
                    )
                )
            ]
        )
        $aggregations
        $groupingPrivate
    )
    $filters
)

# RejectNullsUnderJoinLeft adds "col IS NOT NULL" null-rejecting filters to the
# left input of a join for each column that is both in the NullRejectCols ColSet
# and is null-rejected by the join's filters. Note that a left join cannot be
# matched even if its filters reject nulls on a column because left joins add
# back unmatched columns to the output. RejectNullsUnderJoinLeft is low priority
# to allow filters to be pushed down entirely, if possible.
[RejectNullsUnderJoinLeft, Normalize, LowPriority]
(InnerJoin | InnerJoinApply | SemiJoin | SemiJoinApply
    $left:* & ^(ColsAreEmpty $rejectCols:(RejectNullCols $left))
    $right:*
    $on:* &
        ^(ColsAreEmpty
            $nullRejectedCols:(IntersectionCols
                $rejectCols
                (GetNullRejectedCols $on)
            )
        )
    $private:*
)
=>
((OpName)
    (Select $left (MakeNullRejectFilters $nullRejectedCols))
    $right
    $on
    $private
)

# RejectNullsUnderJoinRight mirrors RejectNullsUnderJoinLeft.
[RejectNullsUnderJoinRight, Normalize, LowPriority]
(InnerJoin | InnerJoinApply | LeftJoin | LeftJoinApply | SemiJoin
        | AntiJoin
    $left:*
    $right:* &
        ^(ColsAreEmpty $rejectCols:(RejectNullCols $right))
    $on:* &
        ^(ColsAreEmpty
            $nullRejectedCols:(IntersectionCols
                $rejectCols
                (GetNullRejectedCols $on)
            )
        )
    $private:*
)
=>
((OpName)
    $left
    (Select $right (MakeNullRejectFilters $nullRejectedCols))
    $on
    $private
)

# RejectNullsProject adds a "col IS NOT NULL" null-rejecting filter to the input
# of a project if the following conditions hold:
# 如果满足以下条件，RejectNullsProject 会向项目的输入添加一个“col IS NOT NULL”空值拒绝过滤器：
#   1. The parent Select operator rejects nulls on a synthesized (projection)
#      column.
#      父 Select 运算符拒绝合成（投影）列上的空值。
#   2. At least one of the input columns of the projection is in the
#      RejectNullCols ColSet of the input of the Project.
#      投影的至少一个输入列在 Project 输入的 RejectNullCols ColSet 中。
#   3. The projection 'transmits' NULLS from the candidate column; if the column
#      is NULL, the output of the projection is NULL.
#      投影从候选列“传输”NULLS； 如果该列为 NULL，则投影的输出为 NULL。
[RejectNullsProject, Normalize]
(Select
    $input:(Project
            $innerInput:*
            $projections:* &
                ^(ColsAreEmpty
                    $projectionCols:(ProjectionCols $projections)
                )
            $passthrough:*
        ) &
        ^(ColsAreEmpty $rejectNullCols:(RejectNullCols $input))
    $filters:* &
        (HasNullRejectingFilter
            $filters
            $nullRejectedCols:(IntersectionCols
                $projectionCols
                $rejectNullCols
            )
        )
)
=>
(Select
    (Project
        (Select
            $innerInput
            [
                (FiltersItem
                    (IsNot
                        (NullRejectProjections
                            $projections
                            $nullRejectedCols
                            (RejectNullCols $innerInput)
                        )
                        (Null (AnyType))
                    )
                )
            ]
        )
        $projections
        $passthrough
    )
    $filters
)
